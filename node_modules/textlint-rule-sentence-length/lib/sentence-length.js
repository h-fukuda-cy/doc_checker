// LICENSE : MIT
"use strict";

var _sentenceSplitter = require("sentence-splitter");

var _textlintUtilToString = require("textlint-util-to-string");

var _textlintUtilToString2 = _interopRequireDefault(_textlintUtilToString);

var _textlintRuleHelper = require("textlint-rule-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
    max: 100
};
module.exports = function (context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var maxLength = options.max || defaultOptions.max;
    var helper = new _textlintRuleHelper.RuleHelper(context);
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report;
    // toPlainText

    return _defineProperty({}, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, [Syntax.BlockQuote])) {
            return;
        }
        // If a single Link node in the paragraph node, should be ignore the link length
        var isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;
        if (isChildrenSingleLinkNode) {
            return;
        }
        // empty break line == split sentence
        var paragraph = (0, _sentenceSplitter.splitAST)(node);
        paragraph.children.filter(function (sentence) {
            return sentence.type === _sentenceSplitter.Syntax.Sentence;
        }).forEach(function (sentence) {
            var source = new _textlintUtilToString2.default(sentence);
            var sentenceText = source.toString();
            // larger than > 100
            var sentenceLength = sentenceText.length;
            var startLine = sentence.loc.start.line;
            if (sentenceLength > maxLength) {
                //複数行が連結した文字列として評価されてしまう場合がある。
                //対策として Object の要素を見て文字列を連結し直す処理を行う。
                //連結するのは Str と LinkReference と Link と Emphasis の4種類の Object。
                //Link Object の場合は、子要素の raw を使うことで url 部分を排除する。
                //Enphasis は内部に句点と改行を持つ場合があるので、句点と改行で分割する。
                var strList = [];
                var listCnt = 0;
                strList[listCnt] = "";
                var used = false;
                var listLen = sentence.children.length
                for(let lc = 0; lc < listLen; lc++) {
                    switch (sentence.children[lc].type) {
                        case "Str":
                        case "LinkReference":
                            strList[listCnt] += sentence.children[lc].raw;
                            used = true;
                            break;
                        case "Link":
                            strList[listCnt] += sentence.children[lc].children[0].raw;
                            used = true;
                            break;
                        case "Emphasis":
                            let es = sentence.children[lc].raw;
                            let empList = es.split(/。|\n/);
                            let empListLen = empList.length;
                            for(let el = 0; el < empListLen; el++) {
                                strList[listCnt] = empList[el].trim();
                                listCnt++;
                                strList[listCnt] = "";
                            }
                            used = true;
                            break;
                        default:
                            if(used == true) {
                                if(sentence.children[lc].type == "Punctuation") {
                                    strList[listCnt] += sentence.children[lc].raw;
                                }
                                listCnt++;
                                strList[listCnt] = "";
                                used = false;
                            }
                    }
                };

                // 新たに構築したリストを１件づつ検証
                for(let lc = 0; lc < listCnt; lc++) {
                    let sl = strList[lc].length;
                    if (sl > maxLength) {
                      report(sentence, new RuleError("Line " + (startLine + lc) + " sentence length(" + sl + ") exceeds the maximum sentence length of " + maxLength + ".\nOver " + (sl - maxLength) + " characters.\n" + strList[lc]));
                    }
                }
            }
        });
    });
};
//# sourceMappingURL=sentence-length.js.map